{
  "en": {
    "settings_btn": "Settings",
    "grids_btn": "Grids",
    "colors_btn": "Colors",
    "recorder_btn": "Recorder",
    "grid_size_title": "Select a grid size",
    "obstacles_title": "Choose obstacle generation",
    "maze_button": "Generate maze",
    "obstacles_button": "Generate obstacles",
    "clear_button": "Clear grid",
    "spots_title": "Choose grid shape",
    "spots_square": "Square",
    "spots_triangle": "Triangle",
    "spots_hexagon": "Hexagon",
    "arrow_coords_title": "Select additional options",
    "show_arrows": "Show predecessors",
    "show_coords": "Show coordinates",
    "delay_title": "Delay of execution",
    "drop_down_title": "Choose an algorithm",
    "heuristic_title": "Select heuristic",
    "diagonal_title": "Execution options",
    "diagonal_option": "Enable diagonal",
    "run_algorithm": "Run algorithm",
    "nodes_label": "Nodes expanded: ",
    "steps_label": "Steps: ",
    "length_label": "Path length: ",
    "time_label": "Time taken: ",
    "bfs_text": " <font face=fira_code size=2.5> <img src=\"images/bfs.jpg\" float=left padding=\"5px 10px 5px 50px\"> <b> Breadth-First Search (BFS)</b> is an algorithm for searching a tree data structure for a node that satisfies a given property. It starts at the tree root and explores all nodes at the present depth prior to moving on to the nodes at the next depth level. </font>",
    "dfs_text": "<font face=fira_code size=2.5> <img src=\"images/dfs.jpg\" float=left padding=\"5px 10px 5px 50px\">  <b> Depth-First Search (DFS)</b> is an algorithm for traversing or searching tree or graph data structures. The algorithm starts at the root node (selecting some arbitrary node as the root node in the case of a graph) and explores as far as possible along each branch before backtracking. </font>",
    "dijkstra_text": "<font face=fira_code size=2.5> <img src=\"images/dijkstra.jpg\" float=left padding=\"5px 10px 5px 50px\">  <b> Dijkstra's algorithm</b> is ideal to find the shortest path between a and b. It picks the unvisited vertex with the lowest distance, calculates the distance through it to each unvisited neighbor, and updates the neighbor's distance if smaller. </font>",
    "astar_text": "<font face=fira_code size=2.5> <img src=\"images/astar.jpg\" float=left padding=\"5px 40px 5px 50px\">  <b> A* (A-star)</b> is the most popular search algorithm for pathfinding, because itâ€™s fairly flexible and can be used in a wide range of contexts. It begins at the start node and explores neighboring nodes based on a combination of the cost to reach them and an estimated cost (heuristic) to reach the goal from them. This allows it to prioritize nodes that are more likely to lead to an optimal solution, making it more efficient than exploring all nodes at the same depth level, as in breadth-first search. </font> ",
    "greedy_text": "<font face=fira_code size=2.5> <img src=\"images/best.jpg\" float=left padding=\"5px 10px 0px 50px\">  <b> Greedy Best-First-Search</b> is a search algorithm that unlike A* or breadth-first search,  selects the node to explore next purely based on a heuristic that estimates the cost from a node to the goal, without considering the cost to reach that node from the start. As such, it is considered 'greedy' because it makes the locally optimal choice at each step with the hope that these local decisions will lead to a globally optimal solution. However, this approach can sometimes lead to less than optimal solutions, or even fail to find a solution, if the heuristic is not well-chosen or if there are obstacles in the path. </font>",
    "grids_window": "Comparison mode",
    "grids_title": "Choose number of grids",
    "algorithm_error_label": "Place a start and end point!",
    "grid_nr_error": "Too many algorithms picked!",
    "generate_grids": "Generate grids",
    "results_window": "Comparison results"
  }
}